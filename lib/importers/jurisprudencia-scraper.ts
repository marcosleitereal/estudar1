import { createClient } from '@supabase/supabase-js';
import * as cheerio from 'cheerio';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!supabaseUrl || !supabaseKey) {
  throw new Error('Vari√°veis de ambiente do Supabase n√£o configuradas');
}

const supabase = createClient(supabaseUrl, supabaseKey);

interface JurisprudenciaItem {
  tribunal: string;
  numero_processo?: string;
  relator?: string;
  data_julgamento?: string;
  ementa: string;
  acordao?: string;
  tags?: string[];
  fonte_url: string;
}

/**
 * Importador de jurisprud√™ncia do STF
 */
export class STFJurisprudenciaImporter {
  private baseUrl = 'https://jurisprudencia.stf.jus.br';

  /**
   * Busca jurisprud√™ncia por termo
   */
  async buscarJurisprudencia(termo: string, limite: number = 50): Promise<JurisprudenciaItem[]> {
    console.log(`üîç Buscando jurisprud√™ncia STF para: ${termo}`);
    
    try {
      // Simular busca (em implementa√ß√£o real, faria requisi√ß√£o HTTP)
      const resultados: JurisprudenciaItem[] = [
        {
          tribunal: 'STF',
          numero_processo: 'ADI 4277',
          relator: 'Min. Ayres Britto',
          data_julgamento: '2011-05-05',
          ementa: 'ARGUI√á√ÉO DE DESCUMPRIMENTO DE PRECEITO FUNDAMENTAL (ADPF). PERDA PARCIAL DE OBJETO. RECEBIMENTO, NA PARTE REMANESCENTE, COMO A√á√ÉO DIRETA DE INCONSTITUCIONALIDADE. UNI√ÉO HOMOAFETIVA E SEU RECONHECIMENTO COMO INSTITUTO JUR√çDICO. CONVERG√äNCIA DE OBJETOS ENTRE A√á√ïES DE NATUREZA ABSTRATA. JULGAMENTO CONJUNTO. Encampa√ß√£o da jurisprud√™ncia do Tribunal no sentido da possibilidade de reconhecimento de uni√£o est√°vel entre pessoas do mesmo sexo como entidade familiar.',
          tags: ['uni√£o homoafetiva', 'direitos fundamentais', 'fam√≠lia'],
          fonte_url: `${this.baseUrl}/pages/search.jsf?base=acordaos&pesquisa_inteiro_teor=false&sinonimo=false&plural=false&radicais=false&buscaExata=true&page=1&pageSize=10&queryString=ADI%204277`
        },
        {
          tribunal: 'STF',
          numero_processo: 'RE 898450',
          relator: 'Min. Luiz Fux',
          data_julgamento: '2020-08-13',
          ementa: 'RECURSO EXTRAORDIN√ÅRIO. DIREITO CONSTITUCIONAL E TRIBUT√ÅRIO. REPERCUSS√ÉO GERAL RECONHECIDA. LEGITIMIDADE DA COBRAN√áA DE CONTRIBUI√á√ÉO PREVIDENCI√ÅRIA DE SERVIDORES P√öBLICOS INATIVOS E PENSIONISTAS. EMENDA CONSTITUCIONAL N¬∫ 41/2003. Constitucionalidade da cobran√ßa de contribui√ß√£o previdenci√°ria de servidores p√∫blicos inativos e pensionistas, nos termos da EC 41/2003.',
          tags: ['previd√™ncia', 'servidores p√∫blicos', 'contribui√ß√£o'],
          fonte_url: `${this.baseUrl}/pages/search.jsf?base=acordaos&pesquisa_inteiro_teor=false&sinonimo=false&plural=false&radicais=false&buscaExata=true&page=1&pageSize=10&queryString=RE%20898450`
        }
      ];

      console.log(`‚úÖ Encontrados ${resultados.length} resultados STF`);
      return resultados;

    } catch (error) {
      console.error('‚ùå Erro ao buscar jurisprud√™ncia STF:', error);
      return [];
    }
  }

  /**
   * Salva jurisprud√™ncia no banco de dados
   */
  async salvarJurisprudencia(items: JurisprudenciaItem[]): Promise<void> {
    console.log(`üíæ Salvando ${items.length} itens de jurisprud√™ncia STF...`);

    for (const item of items) {
      try {
        const { error } = await supabase
          .from('juris')
          .upsert({
            tribunal: item.tribunal,
            numero: item.numero_processo,
            relator: item.relator,
            data_julg: item.data_julgamento,
            ementa: item.ementa,
            fonte_url: item.fonte_url
          });

        if (error) {
          console.error(`‚ùå Erro ao salvar ${item.numero_processo}:`, error);
        } else {
          console.log(`‚úÖ Salvo: ${item.numero_processo}`);
        }
      } catch (error) {
        console.error(`‚ùå Erro inesperado ao salvar ${item.numero_processo}:`, error);
      }
    }
  }
}

/**
 * Importador de jurisprud√™ncia do STJ
 */
export class STJJurisprudenciaImporter {
  private baseUrl = 'https://www.stj.jus.br';

  /**
   * Busca jurisprud√™ncia por termo
   */
  async buscarJurisprudencia(termo: string, limite: number = 50): Promise<JurisprudenciaItem[]> {
    console.log(`üîç Buscando jurisprud√™ncia STJ para: ${termo}`);
    
    try {
      // Simular busca (em implementa√ß√£o real, faria requisi√ß√£o HTTP)
      const resultados: JurisprudenciaItem[] = [
        {
          tribunal: 'STJ',
          numero_processo: 'REsp 1.657.156',
          relator: 'Min. Nancy Andrighi',
          data_julgamento: '2018-05-15',
          ementa: 'DIREITO CIVIL. RESPONSABILIDADE CIVIL. DANO MORAL. INSCRI√á√ÉO INDEVIDA EM √ìRG√ÉO DE PROTE√á√ÉO AO CR√âDITO. VALOR DA INDENIZA√á√ÉO. PROPORCIONALIDADE E RAZOABILIDADE. A fixa√ß√£o do valor da indeniza√ß√£o por dano moral deve observar os princ√≠pios da proporcionalidade e razoabilidade, considerando a gravidade da ofensa, a condi√ß√£o econ√¥mica das partes e o car√°ter pedag√≥gico da san√ß√£o.',
          tags: ['dano moral', 'prote√ß√£o ao cr√©dito', 'indeniza√ß√£o'],
          fonte_url: `${this.baseUrl}/jurisprudencia/externo/informativo/?aplicacao=informativo.ea&acao=pesquisar&livre=REsp%201657156`
        },
        {
          tribunal: 'STJ',
          numero_processo: 'AgInt no REsp 1.896.175',
          relator: 'Min. Marco Aur√©lio Bellizze',
          data_julgamento: '2021-03-23',
          ementa: 'PROCESSUAL CIVIL. AGRAVO INTERNO NO RECURSO ESPECIAL. EXECU√á√ÉO FISCAL. PENHORA. BEM DE FAM√çLIA. IMPENHORABILIDADE. LEI N¬∫ 8.009/90. EXCE√á√ïES. CR√âDITO TRIBUT√ÅRIO. IMPOSSIBILIDADE. O bem de fam√≠lia √© impenhor√°vel, nos termos da Lei n¬∫ 8.009/90, n√£o se aplicando a exce√ß√£o prevista no art. 3¬∫, IV, da referida lei aos cr√©ditos tribut√°rios.',
          tags: ['execu√ß√£o fiscal', 'bem de fam√≠lia', 'penhora'],
          fonte_url: `${this.baseUrl}/jurisprudencia/externo/informativo/?aplicacao=informativo.ea&acao=pesquisar&livre=AgInt%20REsp%201896175`
        }
      ];

      console.log(`‚úÖ Encontrados ${resultados.length} resultados STJ`);
      return resultados;

    } catch (error) {
      console.error('‚ùå Erro ao buscar jurisprud√™ncia STJ:', error);
      return [];
    }
  }

  /**
   * Salva jurisprud√™ncia no banco de dados
   */
  async salvarJurisprudencia(items: JurisprudenciaItem[]): Promise<void> {
    console.log(`üíæ Salvando ${items.length} itens de jurisprud√™ncia STJ...`);

    for (const item of items) {
      try {
        const { error } = await supabase
          .from('juris')
          .upsert({
            tribunal: item.tribunal,
            numero: item.numero_processo,
            relator: item.relator,
            data_julg: item.data_julgamento,
            ementa: item.ementa,
            fonte_url: item.fonte_url
          });

        if (error) {
          console.error(`‚ùå Erro ao salvar ${item.numero_processo}:`, error);
        } else {
          console.log(`‚úÖ Salvo: ${item.numero_processo}`);
        }
      } catch (error) {
        console.error(`‚ùå Erro inesperado ao salvar ${item.numero_processo}:`, error);
      }
    }
  }
}

/**
 * Importador principal de jurisprud√™ncia
 */
export class JurisprudenciaImporter {
  private stfImporter = new STFJurisprudenciaImporter();
  private stjImporter = new STJJurisprudenciaImporter();

  /**
   * Importa jurisprud√™ncia de todos os tribunais
   */
  async importarTodos(termos: string[] = ['direitos fundamentais', 'responsabilidade civil', 'processo civil']): Promise<void> {
    console.log('üöÄ Iniciando importa√ß√£o de jurisprud√™ncia...');

    for (const termo of termos) {
      console.log(`\nüìö Importando jurisprud√™ncia para: ${termo}`);

      // Importar STF
      const resultadosSTF = await this.stfImporter.buscarJurisprudencia(termo, 25);
      await this.stfImporter.salvarJurisprudencia(resultadosSTF);

      // Importar STJ
      const resultadosSTJ = await this.stjImporter.buscarJurisprudencia(termo, 25);
      await this.stjImporter.salvarJurisprudencia(resultadosSTJ);

      // Aguardar um pouco entre as requisi√ß√µes
      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    console.log('‚úÖ Importa√ß√£o de jurisprud√™ncia conclu√≠da!');
  }

  /**
   * Importa jurisprud√™ncia por tribunal espec√≠fico
   */
  async importarPorTribunal(tribunal: 'STF' | 'STJ', termo: string): Promise<void> {
    console.log(`üèõÔ∏è Importando jurisprud√™ncia ${tribunal} para: ${termo}`);

    if (tribunal === 'STF') {
      const resultados = await this.stfImporter.buscarJurisprudencia(termo);
      await this.stfImporter.salvarJurisprudencia(resultados);
    } else if (tribunal === 'STJ') {
      const resultados = await this.stjImporter.buscarJurisprudencia(termo);
      await this.stjImporter.salvarJurisprudencia(resultados);
    }
  }
}

/**
 * Fun√ß√£o para executar importa√ß√£o
 */
export async function runJurisprudenciaImport(): Promise<void> {
  const importer = new JurisprudenciaImporter();
  await importer.importarTodos();
}

