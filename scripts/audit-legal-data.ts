import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://kpqcynbzoqdauyyjacwu.supabase.co'
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtwcWN5bmJ6b3FkYXV5eWphY3d1Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njg1NzY3NCwiZXhwIjoyMDcyNDMzNjc0fQ.fz0c5maHdX1SbxWlFR4CePIvdEnta6nGzfGQryYLe-s'

const supabase = createClient(supabaseUrl, supabaseKey)

async function auditLegalData() {
  console.log('üìä AUDITORIA COMPLETA DOS DADOS JUR√çDICOS\n')
  console.log('=' .repeat(60))

  try {
    // 1. Verificar tabela laws
    console.log('\nüìö 1. TABELA LAWS (Leis Principais)')
    console.log('-'.repeat(40))
    
    const { data: laws, error: lawsError } = await supabase
      .from('laws')
      .select('*')
      .order('title', { ascending: true })

    if (lawsError) {
      console.error('‚ùå Erro ao buscar laws:', lawsError)
    } else {
      console.log(`‚úÖ Total de leis: ${laws?.length || 0}`)
      
      // Agrupar por tipo/fonte
      const lawsByType = {}
      laws?.forEach(law => {
        const type = law.title || 'Sem t√≠tulo'
        if (!lawsByType[type]) {
          lawsByType[type] = []
        }
        lawsByType[type].push(law)
      })

      Object.entries(lawsByType).forEach(([type, lawList]) => {
        console.log(`\nüìñ ${type}:`)
        lawList.forEach(law => {
          console.log(`   - ${law.article || 'Sem artigo'} (ID: ${law.id.substring(0, 8)}...)`)
        })
      })
    }

    // 2. Verificar tabela law_chunks
    console.log('\n\nüìÑ 2. TABELA LAW_CHUNKS (Conte√∫do Detalhado)')
    console.log('-'.repeat(40))
    
    const { data: chunks, error: chunksError } = await supabase
      .from('law_chunks')
      .select('*')
      .order('created_at', { ascending: true })

    if (chunksError) {
      console.error('‚ùå Erro ao buscar chunks:', chunksError)
    } else {
      console.log(`‚úÖ Total de chunks: ${chunks?.length || 0}`)
      
      // Analisar conte√∫do dos chunks
      const chunksByContent = {}
      chunks?.forEach(chunk => {
        const preview = chunk.content?.substring(0, 50) + '...' || 'Sem conte√∫do'
        const key = chunk.content?.includes('STF') ? 'Jurisprud√™ncia STF' :
                   chunk.content?.includes('STJ') ? 'Jurisprud√™ncia STJ' :
                   chunk.content?.includes('Art.') ? 'Artigos Constitucionais' :
                   'Outros'
        
        if (!chunksByContent[key]) {
          chunksByContent[key] = []
        }
        chunksByContent[key].push(preview)
      })

      Object.entries(chunksByContent).forEach(([category, items]) => {
        console.log(`\nüìã ${category} (${items.length} itens):`)
        items.slice(0, 5).forEach(item => {
          console.log(`   - ${item}`)
        })
        if (items.length > 5) {
          console.log(`   ... e mais ${items.length - 5} itens`)
        }
      })
    }

    // 3. Verificar cobertura das leis principais
    console.log('\n\n‚öñÔ∏è 3. COBERTURA DAS LEIS PRINCIPAIS')
    console.log('-'.repeat(40))
    
    const expectedLaws = [
      'Constitui√ß√£o Federal de 1988',
      'C√≥digo Civil',
      'C√≥digo Penal', 
      'C√≥digo de Processo Civil',
      'C√≥digo de Processo Penal',
      'C√≥digo de Defesa do Consumidor',
      'Consolida√ß√£o das Leis do Trabalho',
      'Lei de Execu√ß√£o Penal',
      'Estatuto da Crian√ßa e do Adolescente',
      'Lei Maria da Penha'
    ]

    expectedLaws.forEach(expectedLaw => {
      const found = laws?.some(law => 
        law.title?.toLowerCase().includes(expectedLaw.toLowerCase()) ||
        law.content?.toLowerCase().includes(expectedLaw.toLowerCase())
      )
      console.log(`${found ? '‚úÖ' : '‚ùå'} ${expectedLaw}`)
    })

    // 4. Verificar artigos constitucionais espec√≠ficos
    console.log('\n\nüìú 4. ARTIGOS CONSTITUCIONAIS ESPEC√çFICOS')
    console.log('-'.repeat(40))
    
    const expectedArticles = [
      'Art. 1¬∫', 'Art. 2¬∫', 'Art. 3¬∫', 'Art. 4¬∫', 'Art. 5¬∫',
      'Art. 6¬∫', 'Art. 7¬∫', 'Art. 8¬∫', 'Art. 9¬∫', 'Art. 10',
      'Art. 18', 'Art. 37', 'Art. 93', 'Art. 102', 'Art. 105'
    ]

    for (const article of expectedArticles) {
      const found = await supabase
        .from('law_chunks')
        .select('id')
        .ilike('content', `%${article}%`)
        .limit(1)
        .single()
      
      console.log(`${found.data ? '‚úÖ' : '‚ùå'} ${article}`)
    }

    // 5. Verificar jurisprud√™ncia
    console.log('\n\n‚öñÔ∏è 5. JURISPRUD√äNCIA DOS TRIBUNAIS SUPERIORES')
    console.log('-'.repeat(40))
    
    const { data: stfCases } = await supabase
      .from('law_chunks')
      .select('content')
      .ilike('content', '%STF%')
    
    const { data: stjCases } = await supabase
      .from('law_chunks')
      .select('content')
      .ilike('content', '%STJ%')

    console.log(`‚úÖ Casos STF: ${stfCases?.length || 0}`)
    console.log(`‚úÖ Casos STJ: ${stjCases?.length || 0}`)

    // 6. Teste de busca funcional
    console.log('\n\nüîç 6. TESTE DE FUNCIONALIDADE DE BUSCA')
    console.log('-'.repeat(40))
    
    const testQueries = [
      'direitos fundamentais',
      'Art. 5¬∫',
      'STF',
      'c√≥digo civil',
      'processo penal'
    ]

    for (const query of testQueries) {
      const { data: results } = await supabase
        .from('law_chunks')
        .select('id')
        .ilike('content', `%${query}%`)
        .limit(5)
      
      console.log(`üîç "${query}": ${results?.length || 0} resultados`)
    }

    // 7. Resumo final
    console.log('\n\nüìä 7. RESUMO FINAL')
    console.log('=' .repeat(60))
    console.log(`üìö Total de leis: ${laws?.length || 0}`)
    console.log(`üìÑ Total de chunks: ${chunks?.length || 0}`)
    console.log(`‚öñÔ∏è Jurisprud√™ncia STF: ${stfCases?.length || 0}`)
    console.log(`‚öñÔ∏è Jurisprud√™ncia STJ: ${stjCases?.length || 0}`)
    
    const completeness = ((laws?.length || 0) / expectedLaws.length) * 100
    console.log(`üìà Completude estimada: ${completeness.toFixed(1)}%`)
    
    if (completeness >= 80) {
      console.log('‚úÖ STATUS: DADOS JUR√çDICOS SUFICIENTES PARA PRODU√á√ÉO')
    } else if (completeness >= 50) {
      console.log('‚ö†Ô∏è STATUS: DADOS PARCIAIS - RECOMENDA-SE EXPANS√ÉO')
    } else {
      console.log('‚ùå STATUS: DADOS INSUFICIENTES - NECESS√ÅRIA POPULA√á√ÉO COMPLETA')
    }

  } catch (error) {
    console.error('‚ùå Erro na auditoria:', error)
  }
}

auditLegalData()

