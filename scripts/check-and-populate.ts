#!/usr/bin/env npx tsx

import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o configuradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

/**
 * Verificar estrutura das tabelas
 */
async function checkTableStructure(): Promise<void> {
  console.log('üîç Verificando estrutura das tabelas...');

  try {
    // Verificar tabela laws
    const { data: lawsData, error: lawsError } = await supabase
      .from('laws')
      .select('*')
      .limit(1);

    if (lawsError) {
      console.error('‚ùå Erro ao verificar tabela laws:', lawsError);
    } else {
      console.log('‚úÖ Estrutura da tabela laws:');
      if (lawsData && lawsData.length > 0) {
        console.log('üìã Colunas dispon√≠veis:', Object.keys(lawsData[0]));
      } else {
        console.log('üìã Tabela laws vazia, verificando com insert de teste...');
      }
    }

    // Verificar tabela law_chunks
    const { data: chunksData, error: chunksError } = await supabase
      .from('law_chunks')
      .select('*')
      .limit(1);

    if (chunksError) {
      console.error('‚ùå Erro ao verificar tabela law_chunks:', chunksError);
    } else {
      console.log('‚úÖ Estrutura da tabela law_chunks:');
      if (chunksData && chunksData.length > 0) {
        console.log('üìã Colunas dispon√≠veis:', Object.keys(chunksData[0]));
      } else {
        console.log('üìã Tabela law_chunks vazia');
      }
    }

    // Verificar tabela sources
    const { data: sourcesData, error: sourcesError } = await supabase
      .from('sources')
      .select('*');

    if (sourcesError) {
      console.error('‚ùå Erro ao verificar tabela sources:', sourcesError);
    } else {
      console.log('‚úÖ Sources dispon√≠veis:');
      sourcesData?.forEach(source => {
        console.log(`  - ${source.id}: ${source.name} (${source.type})`);
      });
    }

  } catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o:', error);
  }
}

/**
 * Popular dados jur√≠dicos com estrutura correta
 */
async function populateCorrectData(): Promise<void> {
  console.log('üìö Populando dados jur√≠dicos com estrutura correta...');

  try {
    // Buscar source_id da Constitui√ß√£o
    const { data: sources } = await supabase
      .from('sources')
      .select('id, name')
      .limit(5);

    const constitutionSource = sources?.find(s => s.name.includes('Constituicao')) || sources?.[0];
    const jurisprudenceSource = sources?.find(s => s.name.includes('Jurisprudencia')) || sources?.[1];

    if (!constitutionSource) {
      console.error('‚ùå Nenhuma fonte encontrada');
      return;
    }

    console.log(`üìñ Usando fonte: ${constitutionSource.name} (${constitutionSource.id})`);

    // Dados das leis principais (estrutura simplificada)
    const lawsToInsert = [
      {
        title: 'Constitui√ß√£o Federal de 1988',
        description: 'Constitui√ß√£o da Rep√∫blica Federativa do Brasil de 1988',
        source_id: constitutionSource.id,
        year: 1988,
        status: 'active'
      },
      {
        title: 'C√≥digo Civil Brasileiro',
        description: 'Lei n¬∫ 10.406, de 10 de janeiro de 2002',
        source_id: constitutionSource.id,
        year: 2002,
        status: 'active'
      },
      {
        title: 'C√≥digo Penal Brasileiro',
        description: 'Decreto-Lei n¬∫ 2.848, de 7 de dezembro de 1940',
        source_id: constitutionSource.id,
        year: 1940,
        status: 'active'
      },
      {
        title: 'C√≥digo de Processo Civil',
        description: 'Lei n¬∫ 13.105, de 16 de mar√ßo de 2015',
        source_id: constitutionSource.id,
        year: 2015,
        status: 'active'
      },
      {
        title: 'C√≥digo de Processo Penal',
        description: 'Decreto-Lei n¬∫ 3.689, de 3 de outubro de 1941',
        source_id: constitutionSource.id,
        year: 1941,
        status: 'active'
      },
      {
        title: 'C√≥digo de Defesa do Consumidor',
        description: 'Lei n¬∫ 8.078, de 11 de setembro de 1990',
        source_id: constitutionSource.id,
        year: 1990,
        status: 'active'
      }
    ];

    // Inserir leis
    for (const law of lawsToInsert) {
      const { data, error } = await supabase
        .from('laws')
        .upsert(law, { onConflict: 'title' })
        .select()
        .single();

      if (error) {
        console.error(`‚ùå Erro ao inserir lei "${law.title}":`, error);
      } else {
        console.log(`‚úÖ Lei "${law.title}" inserida com sucesso (ID: ${data.id})`);

        // Inserir alguns chunks de exemplo para cada lei
        const chunks = [
          {
            law_id: data.id,
            content: `Art. 1¬∫ - ${law.title} - Disposi√ß√µes gerais sobre ${law.description}`,
            article_number: 1,
            chapter: 'Disposi√ß√µes Gerais',
            embedding: null
          },
          {
            law_id: data.id,
            content: `Art. 2¬∫ - ${law.title} - Princ√≠pios fundamentais aplic√°veis`,
            article_number: 2,
            chapter: 'Princ√≠pios Fundamentais',
            embedding: null
          }
        ];

        for (const chunk of chunks) {
          const { error: chunkError } = await supabase
            .from('law_chunks')
            .insert(chunk);

          if (chunkError) {
            console.warn(`‚ö†Ô∏è Erro ao inserir chunk para "${law.title}":`, chunkError);
          } else {
            console.log(`  ‚úÖ Chunk inserido para "${law.title}"`);
          }
        }
      }
    }

    // Inserir jurisprud√™ncia adicional
    if (jurisprudenceSource) {
      console.log('‚öñÔ∏è Inserindo jurisprud√™ncia adicional...');

      const jurisprudenceData = [
        {
          title: 'STF - ADI 4277 - Uni√£o Homoafetiva',
          description: 'A√ß√£o Direta de Inconstitucionalidade sobre uni√£o homoafetiva',
          source_id: jurisprudenceSource.id,
          year: 2011,
          status: 'active'
        },
        {
          title: 'STJ - REsp 1.657.156 - Dano Moral',
          description: 'Recurso Especial sobre dano moral e responsabilidade civil',
          source_id: jurisprudenceSource.id,
          year: 2020,
          status: 'active'
        }
      ];

      for (const juris of jurisprudenceData) {
        const { data, error } = await supabase
          .from('laws')
          .upsert(juris, { onConflict: 'title' })
          .select()
          .single();

        if (error) {
          console.error(`‚ùå Erro ao inserir jurisprud√™ncia "${juris.title}":`, error);
        } else {
          console.log(`‚úÖ Jurisprud√™ncia "${juris.title}" inserida`);

          // Inserir conte√∫do da jurisprud√™ncia
          const { error: chunkError } = await supabase
            .from('law_chunks')
            .insert({
              law_id: data.id,
              content: `${juris.title} - ${juris.description}. Decis√£o proferida pelo tribunal superior.`,
              article_number: 1,
              chapter: 'Decis√£o',
              embedding: null
            });

          if (chunkError) {
            console.warn(`‚ö†Ô∏è Erro ao inserir conte√∫do da jurisprud√™ncia:`, chunkError);
          }
        }
      }
    }

    console.log('üéâ Popula√ß√£o de dados conclu√≠da!');

  } catch (error) {
    console.error('‚ùå Erro durante popula√ß√£o:', error);
  }
}

/**
 * Fun√ß√£o principal
 */
async function main(): Promise<void> {
  try {
    console.log('üöÄ Verificando e populando dados jur√≠dicos...');
    console.log('');
    
    await checkTableStructure();
    console.log('');
    await populateCorrectData();
    
    console.log('');
    console.log('‚úÖ Processo conclu√≠do!');

  } catch (error) {
    console.error('‚ùå Erro na execu√ß√£o:', error);
    process.exit(1);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  main();
}

