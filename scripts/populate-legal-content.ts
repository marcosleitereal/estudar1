#!/usr/bin/env npx tsx

import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o configuradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

/**
 * Popula o banco com conte√∫do jur√≠dico usando as tabelas existentes
 */
async function populateLegalContent(): Promise<void> {
  console.log('üöÄ Iniciando popula√ß√£o de conte√∫do jur√≠dico...');
  
  try {
    // 1. Limpar dados existentes
    await clearExistingData();
    
    // 2. Criar fontes (sources)
    await createSources();
    
    // 3. Criar leis principais
    await createMainLaws();
    
    // 4. Criar artigos da Constitui√ß√£o
    await createConstitutionArticles();
    
    // 5. Criar s√∫mulas
    await createSumulas();
    
    // 6. Criar enunciados
    await createEnunciados();
    
    console.log('‚úÖ Popula√ß√£o de conte√∫do jur√≠dico conclu√≠da!');
    
  } catch (error) {
    console.error('‚ùå Erro durante a popula√ß√£o:', error);
    throw error;
  }
}

/**
 * Limpa dados existentes
 */
async function clearExistingData(): Promise<void> {
  console.log('üßπ Limpando dados existentes...');
  
  // Limpar law_chunks relacionados ao conte√∫do jur√≠dico
  await supabase
    .from('law_chunks')
    .delete()
    .neq('id', '00000000-0000-0000-0000-000000000000'); // Delete all except dummy
    
  // Limpar laws relacionadas
  await supabase
    .from('laws')
    .delete()
    .neq('id', '00000000-0000-0000-0000-000000000000');
    
  console.log('‚úÖ Dados existentes limpos');
}

/**
 * Cria fontes de dados
 */
async function createSources(): Promise<void> {
  console.log('üìö Criando fontes de dados...');
  
  const sources = [
    {
      id: 'planalto',
      name: 'Planalto - Presid√™ncia da Rep√∫blica',
      url: 'http://www.planalto.gov.br/',
      type: 'oficial',
      description: 'Portal oficial da legisla√ß√£o brasileira'
    },
    {
      id: 'stf',
      name: 'Supremo Tribunal Federal',
      url: 'https://portal.stf.jus.br/',
      type: 'tribunal',
      description: 'Portal do STF com s√∫mulas e jurisprud√™ncia'
    },
    {
      id: 'stj',
      name: 'Superior Tribunal de Justi√ßa',
      url: 'https://www.stj.jus.br/',
      type: 'tribunal',
      description: 'Portal do STJ com s√∫mulas e jurisprud√™ncia'
    }
  ];

  for (const source of sources) {
    const { error } = await supabase
      .from('sources')
      .upsert(source);

    if (error) {
      console.error(`‚ùå Erro ao criar fonte ${source.name}:`, error);
    } else {
      console.log(`‚úÖ Fonte ${source.name} criada`);
    }
  }
}

/**
 * Cria leis principais
 */
async function createMainLaws(): Promise<void> {
  console.log('üìñ Criando leis principais...');
  
  const laws = [
    {
      id: 'cf-1988',
      title: 'Constitui√ß√£o da Rep√∫blica Federativa do Brasil de 1988',
      type: 'constituicao',
      year: 1988,
      source_id: 'planalto',
      url: 'http://www.planalto.gov.br/ccivil_03/constituicao/constituicao.htm',
      metadata: {
        publication_date: '1988-10-05',
        status: 'vigente',
        scope: 'federal'
      }
    },
    {
      id: 'cc-2002',
      title: 'C√≥digo Civil',
      type: 'codigo',
      year: 2002,
      source_id: 'planalto',
      url: 'http://www.planalto.gov.br/ccivil_03/leis/2002/l10406.htm',
      metadata: {
        publication_date: '2002-01-10',
        law_number: '10.406',
        status: 'vigente'
      }
    },
    {
      id: 'cp-1940',
      title: 'C√≥digo Penal',
      type: 'codigo',
      year: 1940,
      source_id: 'planalto',
      url: 'http://www.planalto.gov.br/ccivil_03/decreto-lei/del2848.htm',
      metadata: {
        publication_date: '1940-12-07',
        law_number: '2.848',
        status: 'vigente'
      }
    }
  ];

  for (const law of laws) {
    const { error } = await supabase
      .from('laws')
      .upsert(law);

    if (error) {
      console.error(`‚ùå Erro ao criar lei ${law.title}:`, error);
    } else {
      console.log(`‚úÖ Lei ${law.title} criada`);
    }
  }
}

/**
 * Cria artigos da Constitui√ß√£o Federal
 */
async function createConstitutionArticles(): Promise<void> {
  console.log('üèõÔ∏è Criando artigos da Constitui√ß√£o Federal...');
  
  const articles = [
    {
      law_id: 'cf-1988',
      article_number: 'Art. 1¬∫',
      title: 'Fundamentos da Rep√∫blica Federativa do Brasil',
      content: 'A Rep√∫blica Federativa do Brasil, formada pela uni√£o indissol√∫vel dos Estados e Munic√≠pios e do Distrito Federal, constitui-se em Estado Democr√°tico de Direito e tem como fundamentos: I - a soberania; II - a cidadania; III - a dignidade da pessoa humana; IV - os valores sociais do trabalho e da livre iniciativa; V - o pluralismo pol√≠tico. Par√°grafo √∫nico. Todo o poder emana do povo, que o exerce por meio de representantes eleitos ou diretamente, nos termos desta Constitui√ß√£o.',
      keywords: ['soberania', 'cidadania', 'dignidade', 'democracia', 'fundamentos']
    },
    {
      law_id: 'cf-1988',
      article_number: 'Art. 2¬∫',
      title: 'Separa√ß√£o dos Poderes',
      content: 'S√£o Poderes da Uni√£o, independentes e harm√¥nicos entre si, o Legislativo, o Executivo e o Judici√°rio.',
      keywords: ['separa√ß√£o', 'poderes', 'legislativo', 'executivo', 'judici√°rio']
    },
    {
      law_id: 'cf-1988',
      article_number: 'Art. 3¬∫',
      title: 'Objetivos Fundamentais da Rep√∫blica',
      content: 'Constituem objetivos fundamentais da Rep√∫blica Federativa do Brasil: I - construir uma sociedade livre, justa e solid√°ria; II - garantir o desenvolvimento nacional; III - erradicar a pobreza e a marginaliza√ß√£o e reduzir as desigualdades sociais e regionais; IV - promover o bem de todos, sem preconceitos de origem, ra√ßa, sexo, cor, idade e quaisquer outras formas de discrimina√ß√£o.',
      keywords: ['objetivos', 'sociedade', 'desenvolvimento', 'igualdade', 'discrimina√ß√£o']
    },
    {
      law_id: 'cf-1988',
      article_number: 'Art. 5¬∫',
      title: 'Direitos e Deveres Individuais e Coletivos',
      content: 'Todos s√£o iguais perante a lei, sem distin√ß√£o de qualquer natureza, garantindo-se aos brasileiros e aos estrangeiros residentes no Pa√≠s a inviolabilidade do direito √† vida, √† liberdade, √† igualdade, √† seguran√ßa e √† propriedade, nos termos seguintes: I - homens e mulheres s√£o iguais em direitos e obriga√ß√µes, nos termos desta Constitui√ß√£o; II - ningu√©m ser√° obrigado a fazer ou deixar de fazer alguma coisa sen√£o em virtude de lei; III - ningu√©m ser√° submetido a tortura nem a tratamento desumano ou degradante; IV - √© livre a manifesta√ß√£o do pensamento, sendo vedado o anonimato; V - √© assegurado o direito de resposta, proporcional ao agravo, al√©m da indeniza√ß√£o por dano material, moral ou √† imagem...',
      keywords: ['direitos fundamentais', 'igualdade', 'liberdade', 'seguran√ßa', 'propriedade']
    },
    {
      law_id: 'cf-1988',
      article_number: 'Art. 18',
      title: 'Organiza√ß√£o Pol√≠tico-Administrativa',
      content: 'A organiza√ß√£o pol√≠tico-administrativa da Rep√∫blica Federativa do Brasil compreende a Uni√£o, os Estados, o Distrito Federal e os Munic√≠pios, todos aut√¥nomos, nos termos desta Constitui√ß√£o.',
      keywords: ['federa√ß√£o', 'uni√£o', 'estados', 'munic√≠pios', 'autonomia']
    }
  ];

  for (const article of articles) {
    const { error } = await supabase
      .from('law_chunks')
      .upsert({
        law_id: article.law_id,
        chunk_index: parseInt(article.article_number.match(/\d+/)?.[0] || '0'),
        content: `${article.article_number} - ${article.title}\n\n${article.content}`,
        metadata: {
          article_number: article.article_number,
          title: article.title,
          type: 'article',
          keywords: article.keywords
        }
      });

    if (error) {
      console.error(`‚ùå Erro ao criar ${article.article_number}:`, error);
    } else {
      console.log(`‚úÖ ${article.article_number} criado`);
    }
  }
}

/**
 * Cria s√∫mulas
 */
async function createSumulas(): Promise<void> {
  console.log('‚öñÔ∏è Criando s√∫mulas...');
  
  const sumulas = [
    {
      law_id: 'stf-sumulas',
      number: 11,
      court: 'STF',
      type: 'vinculante',
      title: 'Uso de Algemas',
      content: 'S√≥ √© l√≠cito o uso de algemas em casos de resist√™ncia e de fundado receio de fuga ou de perigo √† integridade f√≠sica pr√≥pria ou alheia, por parte do preso ou de terceiros, justificada a excepcionalidade por escrito, sob pena de responsabilidade disciplinar, civil e penal do agente ou da autoridade e de nulidade da pris√£o ou do ato processual a que se refere, sem preju√≠zo da responsabilidade civil do Estado.',
      keywords: ['algemas', 'pris√£o', 'direitos', 'processo penal']
    },
    {
      law_id: 'stf-sumulas',
      number: 13,
      court: 'STF',
      type: 'vinculante',
      title: 'Nepotismo',
      content: 'A nomea√ß√£o de c√¥njuge, companheiro ou parente em linha reta, colateral ou por afinidade, at√© o terceiro grau, inclusive, da autoridade nomeante ou de servidor da mesma pessoa jur√≠dica investido em cargo de dire√ß√£o, chefia ou assessoramento, para o exerc√≠cio de cargo em comiss√£o ou de confian√ßa ou, ainda, de fun√ß√£o gratificada na administra√ß√£o p√∫blica direta e indireta em qualquer dos poderes da Uni√£o, dos Estados, do Distrito Federal e dos Munic√≠pios, compreendido o ajuste mediante designa√ß√µes rec√≠procas, viola a Constitui√ß√£o Federal.',
      keywords: ['nepotismo', 'administra√ß√£o p√∫blica', 'nomea√ß√£o', 'parentes']
    },
    {
      law_id: 'stf-sumulas',
      number: 473,
      court: 'STF',
      type: 'comum',
      title: 'Anula√ß√£o e Revoga√ß√£o de Atos Administrativos',
      content: 'A administra√ß√£o pode anular seus pr√≥prios atos, quando eivados de v√≠cios que os tornam ilegais, porque deles n√£o se originam direitos; ou revog√°-los, por motivo de conveni√™ncia ou oportunidade, respeitados os direitos adquiridos, e ressalvada, em todos os casos, a aprecia√ß√£o judicial.',
      keywords: ['atos administrativos', 'anula√ß√£o', 'revoga√ß√£o', 'legalidade']
    },
    {
      law_id: 'stj-sumulas',
      number: 284,
      court: 'STJ',
      type: 'comum',
      title: 'SPC e SERASA',
      content: 'A inser√ß√£o do nome do devedor no SPC e no SERASA constitui pr√°tica comercial l√≠cita e exerc√≠cio regular de direito.',
      keywords: ['SPC', 'SERASA', 'prote√ß√£o ao cr√©dito', 'direito comercial']
    },
    {
      law_id: 'stj-sumulas',
      number: 385,
      court: 'STJ',
      type: 'comum',
      title: 'Dano Moral e Inscri√ß√£o Irregular',
      content: 'Da anota√ß√£o irregular em cadastro de prote√ß√£o ao cr√©dito, n√£o cabe indeniza√ß√£o por dano moral, quando preexistente leg√≠tima inscri√ß√£o, ressalvado o direito ao cancelamento.',
      keywords: ['dano moral', 'cadastro', 'prote√ß√£o ao cr√©dito', 'indeniza√ß√£o']
    }
  ];

  // Primeiro criar as "leis" para as s√∫mulas
  await supabase.from('laws').upsert([
    {
      id: 'stf-sumulas',
      title: 'S√∫mulas do Supremo Tribunal Federal',
      type: 'sumulas',
      year: 2024,
      source_id: 'stf',
      url: 'https://portal.stf.jus.br/jurisprudencia/',
      metadata: { court: 'STF', type: 'collection' }
    },
    {
      id: 'stj-sumulas',
      title: 'S√∫mulas do Superior Tribunal de Justi√ßa',
      type: 'sumulas',
      year: 2024,
      source_id: 'stj',
      url: 'https://www.stj.jus.br/',
      metadata: { court: 'STJ', type: 'collection' }
    }
  ]);

  for (const sumula of sumulas) {
    const { error } = await supabase
      .from('law_chunks')
      .upsert({
        law_id: sumula.law_id,
        chunk_index: sumula.number,
        content: `S√∫mula ${sumula.type === 'vinculante' ? 'Vinculante ' : ''}${sumula.number} ${sumula.court} - ${sumula.title}\n\n${sumula.content}`,
        metadata: {
          number: sumula.number,
          court: sumula.court,
          type: sumula.type,
          title: sumula.title,
          keywords: sumula.keywords,
          content_type: 'sumula'
        }
      });

    if (error) {
      console.error(`‚ùå Erro ao criar S√∫mula ${sumula.number} ${sumula.court}:`, error);
    } else {
      console.log(`‚úÖ S√∫mula ${sumula.number} ${sumula.court} criada`);
    }
  }
}

/**
 * Cria enunciados
 */
async function createEnunciados(): Promise<void> {
  console.log('üìã Criando enunciados...');
  
  // Criar "lei" para enunciados
  await supabase.from('laws').upsert({
    id: 'cjf-enunciados',
    title: 'Enunciados do Conselho da Justi√ßa Federal',
    type: 'enunciados',
    year: 2024,
    source_id: 'planalto',
    url: 'https://www.cjf.jus.br/',
    metadata: { organ: 'CJF', type: 'collection' }
  });

  const enunciados = [
    {
      number: 1,
      title: 'Dignidade da Pessoa Humana',
      content: 'A dignidade da pessoa humana na bio√©tica n√£o coincide com a santidade da vida.',
      keywords: ['dignidade', 'pessoa humana', 'bio√©tica']
    },
    {
      number: 2,
      title: 'Direitos da Personalidade',
      content: 'A disposi√ß√£o gratuita do pr√≥prio corpo, no todo ou em parte, para depois da morte, com objetivo cient√≠fico, ou altru√≠stico, √© cl√°usula geral de tutela e promo√ß√£o da pessoa humana.',
      keywords: ['personalidade', 'corpo', 'doa√ß√£o', 'altru√≠smo']
    }
  ];

  for (const enunciado of enunciados) {
    const { error } = await supabase
      .from('law_chunks')
      .upsert({
        law_id: 'cjf-enunciados',
        chunk_index: enunciado.number,
        content: `Enunciado ${enunciado.number} CJF - ${enunciado.title}\n\n${enunciado.content}`,
        metadata: {
          number: enunciado.number,
          organ: 'CJF',
          title: enunciado.title,
          keywords: enunciado.keywords,
          content_type: 'enunciado'
        }
      });

    if (error) {
      console.error(`‚ùå Erro ao criar Enunciado ${enunciado.number}:`, error);
    } else {
      console.log(`‚úÖ Enunciado ${enunciado.number} criado`);
    }
  }
}

/**
 * Fun√ß√£o principal
 */
async function main(): Promise<void> {
  try {
    await populateLegalContent();
    console.log('üéâ Popula√ß√£o conclu√≠da com sucesso!');
  } catch (error) {
    console.error('‚ùå Erro durante a popula√ß√£o:', error);
    process.exit(1);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  main();
}

