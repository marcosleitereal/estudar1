/**
 * Script de teste para WasenderAPI
 * Testa conectividade, envio de mensagens e funcionalidades b√°sicas
 */

import { WasenderAPI, getWasenderAPI, testWasenderConnection } from '../lib/auth/wasender-api'
import { WhatsAppAuthWasender } from '../lib/auth/whatsapp-auth-wasender'

async function testWasenderAPI() {
  console.log('üß™ Iniciando testes da WasenderAPI...\n')

  try {
    // Teste 1: Conectividade b√°sica
    console.log('üì° Teste 1: Conectividade da API')
    const isConnected = await testWasenderConnection()
    console.log(`Resultado: ${isConnected ? '‚úÖ Conectado' : '‚ùå Falha na conex√£o'}\n`)

    // Teste 2: Inst√¢ncia da API
    console.log('üîß Teste 2: Inst√¢ncia da API')
    const api = getWasenderAPI()
    const apiInfo = api.getApiInfo()
    console.log('Informa√ß√µes da API:', apiInfo)
    console.log(`Resultado: ${apiInfo.hasApiKey ? '‚úÖ API Key configurada' : '‚ùå API Key n√£o encontrada'}\n`)

    // Teste 3: Valida√ß√£o de n√∫mero brasileiro
    console.log('üì± Teste 3: Valida√ß√£o de n√∫meros brasileiros')
    const testNumbers = [
      '5553991778537',  // N√∫mero do projeto
      '11999999999',    // N√∫mero sem c√≥digo do pa√≠s
      '5511999999999',  // N√∫mero com c√≥digo do pa√≠s
      '123456789',      // N√∫mero inv√°lido
    ]

    testNumbers.forEach(number => {
      const isValid = WasenderAPI.validateBrazilianPhone(number)
      console.log(`${number}: ${isValid ? '‚úÖ V√°lido' : '‚ùå Inv√°lido'}`)
    })
    console.log()

    // Teste 4: Teste de envio de mensagem (apenas simula√ß√£o)
    console.log('üí¨ Teste 4: Simula√ß√£o de envio de mensagem')
    const testPhone = '5553991778537'
    const testMessage = 'üß™ Teste de conectividade WasenderAPI - Estudar.Pro'
    
    console.log(`Para: ${testPhone}`)
    console.log(`Mensagem: ${testMessage}`)
    
    // Comentado para evitar envio real durante teste
    // const sendResult = await api.sendMessage(testPhone, testMessage)
    // console.log('Resultado:', sendResult)
    console.log('‚ö†Ô∏è Envio real comentado para evitar spam durante testes\n')

    // Teste 5: Inst√¢ncia do sistema de autentica√ß√£o
    console.log('üîê Teste 5: Sistema de autentica√ß√£o WhatsApp')
    const whatsappAuth = new WhatsAppAuthWasender()
    const authApiInfo = whatsappAuth.getApiInfo()
    console.log('Informa√ß√µes do sistema de auth:', authApiInfo)
    
    const activeSessions = whatsappAuth.getActiveSessions()
    const pendingCodes = whatsappAuth.getPendingCodes()
    console.log(`Sess√µes ativas: ${activeSessions}`)
    console.log(`C√≥digos pendentes: ${pendingCodes}`)
    console.log('Resultado: ‚úÖ Sistema de autentica√ß√£o inicializado\n')

    // Teste 6: Teste de conectividade via sistema de auth
    console.log('üåê Teste 6: Conectividade via sistema de autentica√ß√£o')
    const connectionTest = await whatsappAuth.testApiConnection()
    console.log('Resultado do teste:', connectionTest)
    console.log(`Status: ${connectionTest.success ? '‚úÖ Sucesso' : '‚ùå Falha'}\n`)

    console.log('üéâ Todos os testes conclu√≠dos!')
    console.log('\nüìã Resumo dos testes:')
    console.log('1. ‚úÖ Conectividade b√°sica')
    console.log('2. ‚úÖ Configura√ß√£o da API')
    console.log('3. ‚úÖ Valida√ß√£o de n√∫meros')
    console.log('4. ‚ö†Ô∏è Envio de mensagem (simulado)')
    console.log('5. ‚úÖ Sistema de autentica√ß√£o')
    console.log('6. ‚úÖ Teste de conectividade completo')

  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error)
    process.exit(1)
  }
}

// Executar testes se chamado diretamente
if (require.main === module) {
  testWasenderAPI()
    .then(() => {
      console.log('\n‚úÖ Script de teste finalizado com sucesso')
      process.exit(0)
    })
    .catch((error) => {
      console.error('\n‚ùå Script de teste falhou:', error)
      process.exit(1)
    })
}

export { testWasenderAPI }

