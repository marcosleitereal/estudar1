#!/usr/bin/env npx tsx

import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o configuradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

/**
 * Configurar pol√≠ticas RLS para o bucket avatars
 */
async function fixAvatarPolicies(): Promise<void> {
  console.log('üîê Configurando pol√≠ticas RLS para avatars...');

  try {
    // SQL para criar/atualizar pol√≠ticas
    const policies = [
      // Pol√≠tica para permitir upload de avatars (usu√°rios autenticados)
      `
        DROP POLICY IF EXISTS "Users can upload their own avatar" ON storage.objects;
        CREATE POLICY "Users can upload their own avatar" ON storage.objects
        FOR INSERT WITH CHECK (
          bucket_id = 'avatars' AND 
          auth.uid() IS NOT NULL
        );
      `,
      
      // Pol√≠tica para permitir visualiza√ß√£o de avatars (p√∫blico)
      `
        DROP POLICY IF EXISTS "Avatar images are publicly accessible" ON storage.objects;
        CREATE POLICY "Avatar images are publicly accessible" ON storage.objects
        FOR SELECT USING (bucket_id = 'avatars');
      `,
      
      // Pol√≠tica para permitir atualiza√ß√£o de avatars (pr√≥prio usu√°rio)
      `
        DROP POLICY IF EXISTS "Users can update their own avatar" ON storage.objects;
        CREATE POLICY "Users can update their own avatar" ON storage.objects
        FOR UPDATE USING (
          bucket_id = 'avatars' AND 
          auth.uid() IS NOT NULL
        );
      `,
      
      // Pol√≠tica para permitir exclus√£o de avatars (pr√≥prio usu√°rio)
      `
        DROP POLICY IF EXISTS "Users can delete their own avatar" ON storage.objects;
        CREATE POLICY "Users can delete their own avatar" ON storage.objects
        FOR DELETE USING (
          bucket_id = 'avatars' AND 
          auth.uid() IS NOT NULL
        );
      `
    ];

    // Executar cada pol√≠tica
    for (let i = 0; i < policies.length; i++) {
      const policy = policies[i];
      console.log(`üìù Aplicando pol√≠tica ${i + 1}/${policies.length}...`);
      
      try {
        const { error } = await supabase.rpc('exec_sql', { sql: policy });
        if (error) {
          console.warn(`‚ö†Ô∏è Aviso na pol√≠tica ${i + 1}:`, error.message);
        } else {
          console.log(`‚úÖ Pol√≠tica ${i + 1} aplicada com sucesso`);
        }
      } catch (err) {
        console.warn(`‚ö†Ô∏è Erro na pol√≠tica ${i + 1}:`, err);
      }
    }

    // Verificar se o bucket est√° p√∫blico
    console.log('üåê Verificando configura√ß√£o do bucket...');
    
    const { data: buckets, error: listError } = await supabase.storage.listBuckets();
    if (listError) {
      console.error('‚ùå Erro ao listar buckets:', listError);
      return;
    }

    const avatarsBucket = buckets?.find(bucket => bucket.name === 'avatars');
    if (avatarsBucket) {
      console.log('‚úÖ Bucket avatars encontrado');
      console.log('üìä Configura√ß√£o:', {
        public: avatarsBucket.public,
        allowedMimeTypes: avatarsBucket.allowed_mime_types,
        fileSizeLimit: avatarsBucket.file_size_limit
      });
    }

  } catch (error) {
    console.error('‚ùå Erro na configura√ß√£o:', error);
  }
}

/**
 * Testar upload com usu√°rio autenticado
 */
async function testAuthenticatedUpload(): Promise<void> {
  console.log('üß™ Testando upload autenticado...');

  try {
    // Primeiro, fazer login com o usu√°rio admin
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email: 'dev@sonnik.com.br',
      password: 'admin123456'
    });

    if (authError) {
      console.error('‚ùå Erro no login:', authError);
      return;
    }

    console.log('‚úÖ Login realizado com sucesso');

    // Criar um arquivo de teste (1x1 pixel PNG)
    const testImageData = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChAI9jU77yQAAAABJRU5ErkJggg==';
    const testImageBuffer = Buffer.from(testImageData, 'base64');
    
    const testFileName = `test-auth-${Date.now()}.png`;

    // Fazer upload autenticado
    const { error: uploadError } = await supabase.storage
      .from('avatars')
      .upload(testFileName, testImageBuffer, {
        contentType: 'image/png',
        cacheControl: '3600'
      });

    if (uploadError) {
      console.error('‚ùå Erro no teste de upload autenticado:', uploadError);
      return;
    }

    // Obter URL p√∫blica
    const { data } = supabase.storage
      .from('avatars')
      .getPublicUrl(testFileName);

    console.log('‚úÖ Teste de upload autenticado bem-sucedido');
    console.log('üîó URL de teste:', data.publicUrl);

    // Limpar arquivo de teste
    await supabase.storage
      .from('avatars')
      .remove([testFileName]);

    console.log('üßπ Arquivo de teste removido');

    // Fazer logout
    await supabase.auth.signOut();
    console.log('üö™ Logout realizado');

  } catch (error) {
    console.error('‚ùå Erro no teste autenticado:', error);
  }
}

/**
 * Fun√ß√£o principal
 */
async function main(): Promise<void> {
  try {
    console.log('üöÄ Corrigindo pol√≠ticas do bucket avatars...');
    
    await fixAvatarPolicies();
    await testAuthenticatedUpload();
    
    console.log('üéâ Corre√ß√£o de pol√≠ticas conclu√≠da!');
    console.log('');
    console.log('üìã Resumo:');
    console.log('‚úÖ Pol√≠ticas RLS configuradas');
    console.log('‚úÖ Upload autenticado testado');
    console.log('‚úÖ Bucket configurado corretamente');
    console.log('');
    console.log('üîß Agora o upload de avatars deve funcionar!');

  } catch (error) {
    console.error('‚ùå Erro durante corre√ß√£o:', error);
    process.exit(1);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  main();
}

