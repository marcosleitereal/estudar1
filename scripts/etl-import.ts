#!/usr/bin/env tsx
// ETL Import Scripts for Legal Content

import { createClient } from '@supabase/supabase-js'
import { ConstitutionParser, CivilCodeParser, SumulaParser, TextChunker } from '../lib/etl/parsers'
import { ETLPipeline } from '../lib/etl/embeddings'
import fetch from 'node-fetch'

// Initialize Supabase client
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY!
const supabase = createClient(supabaseUrl, supabaseKey)

/**
 * Import Constitution Federal (CF/88)
 */
async function importConstitution() {
  console.log('üèõÔ∏è Importing Brazilian Constitution...')
  
  try {
    // Fetch Constitution HTML from Planalto
    const response = await fetch('http://www.planalto.gov.br/ccivil_03/constituicao/constituicao.htm')
    const html = await response.text()
    
    // Parse document
    const document = ConstitutionParser.parse(html)
    
    // Generate chunks for RAG
    const chunks = TextChunker.chunkLegalContent(document.content, 1000)
    
    // Process through ETL pipeline
    const pipeline = new ETLPipeline()
    await pipeline.processDocument(document, chunks, supabase)
    
    console.log('‚úÖ Constitution imported successfully')
  } catch (error) {
    console.error('‚ùå Error importing Constitution:', error)
  }
}

/**
 * Import Civil Code (CC/2002)
 */
async function importCivilCode() {
  console.log('üìú Importing Civil Code...')
  
  try {
    // Fetch Civil Code HTML from Planalto
    const response = await fetch('http://www.planalto.gov.br/ccivil_03/leis/2002/l10406.htm')
    const html = await response.text()
    
    // Parse document
    const document = CivilCodeParser.parse(html)
    
    // Generate chunks for RAG
    const chunks = TextChunker.chunkLegalContent(document.content, 1000)
    
    // Process through ETL pipeline
    const pipeline = new ETLPipeline()
    await pipeline.processDocument(document, chunks, supabase)
    
    console.log('‚úÖ Civil Code imported successfully')
  } catch (error) {
    console.error('‚ùå Error importing Civil Code:', error)
  }
}

/**
 * Import STF S√∫mulas
 */
async function importSTFSumulas() {
  console.log('‚öñÔ∏è Importing STF S√∫mulas...')
  
  try {
    // Mock data for demonstration (in production, fetch from STF website)
    const mockHTML = `
      <div class="sumula">S√∫mula 1: √â vedada a cobran√ßa de taxa de matr√≠cula nas universidades p√∫blicas.</div>
      <div class="sumula">S√∫mula 2: A taxa de ocupa√ß√£o territorial urbana n√£o pode ter base de c√°lculo id√™ntica √† do IPTU.</div>
      <div class="sumula">S√∫mula Vinculante 1: Ofende o princ√≠pio da moralidade administrativa a nomea√ß√£o de c√¥njuge, companheiro, ou parente em linha reta, colateral ou por afinidade, at√© o terceiro grau, inclusive, da autoridade nomeante ou de servidor da mesma pessoa jur√≠dica, investido em cargo de dire√ß√£o, chefia ou assessoramento, para o exerc√≠cio de cargo em comiss√£o ou de confian√ßa, ou, ainda, de fun√ß√£o gratificada na Administra√ß√£o P√∫blica direta e indireta, em qualquer dos Poderes da Uni√£o, dos Estados, do Distrito Federal e dos munic√≠pios, compreendido o ajuste mediante designa√ß√µes rec√≠procas, exceto para os cargos pol√≠ticos de Ministro de Estado, de Secret√°rio Estadual, de Secret√°rio Municipal ou equivalentes.</div>
    `
    
    // Parse s√∫mulas
    const sumulas = SumulaParser.parseSTF(mockHTML)
    
    // Generate chunks for RAG
    const chunks = TextChunker.chunkSumulas(sumulas, 500)
    
    // Process through ETL pipeline
    const pipeline = new ETLPipeline()
    await pipeline.processSumulas(sumulas, chunks, supabase)
    
    console.log('‚úÖ STF S√∫mulas imported successfully')
  } catch (error) {
    console.error('‚ùå Error importing STF S√∫mulas:', error)
  }
}

/**
 * Import STJ S√∫mulas
 */
async function importSTJSumulas() {
  console.log('‚öñÔ∏è Importing STJ S√∫mulas...')
  
  try {
    // Mock data for demonstration
    const mockHTML = `
      <div class="sumula">S√∫mula 1: O foro do domic√≠lio ou da resid√™ncia do alimentando √© o competente para a a√ß√£o de investiga√ß√£o de paternidade, quando cumulada com a de alimentos.</div>
      <div class="sumula">S√∫mula 2: N√£o cabe o habeas corpus contra decis√£o condenat√≥ria a pena de multa, ou relativo a processo em curso por infra√ß√£o penal a que a pena pecuni√°ria seja a √∫nica cominada.</div>
      <div class="sumula">S√∫mula 3: A compet√™ncia para processar e julgar as a√ß√µes conexas √© do ju√≠zo prevento, observadas as regras do C√≥digo de Processo Civil.</div>
    `
    
    // Parse s√∫mulas
    const sumulas = SumulaParser.parseSTJ(mockHTML)
    
    // Generate chunks for RAG
    const chunks = TextChunker.chunkSumulas(sumulas, 500)
    
    // Process through ETL pipeline
    const pipeline = new ETLPipeline()
    await pipeline.processSumulas(sumulas, chunks, supabase)
    
    console.log('‚úÖ STJ S√∫mulas imported successfully')
  } catch (error) {
    console.error('‚ùå Error importing STJ S√∫mulas:', error)
  }
}

/**
 * Import sample legal documents
 */
async function importSampleDocuments() {
  console.log('üìö Importing sample legal documents...')
  
  try {
    // Sample Constitution articles
    const sampleConstitution = {
      id: 'cf88_sample',
      title: 'Constitui√ß√£o Federal - Artigos Exemplo',
      type: 'constitution' as const,
      source_url: 'http://www.planalto.gov.br/ccivil_03/constituicao/constituicao.htm',
      content: [
        {
          id: 'art5',
          type: 'article' as const,
          number: '5',
          text: 'Todos s√£o iguais perante a lei, sem distin√ß√£o de qualquer natureza, garantindo-se aos brasileiros e aos estrangeiros residentes no Pa√≠s a inviolabilidade do direito √† vida, √† liberdade, √† igualdade, √† seguran√ßa e √† propriedade.',
          level: 1,
          children: ['art5_par1', 'art5_inc1']
        },
        {
          id: 'art5_inc1',
          type: 'item' as const,
          number: 'I',
          text: 'homens e mulheres s√£o iguais em direitos e obriga√ß√µes, nos termos desta Constitui√ß√£o;',
          parent_id: 'art5',
          level: 2
        },
        {
          id: 'art6',
          type: 'article' as const,
          number: '6',
          text: 'S√£o direitos sociais a educa√ß√£o, a sa√∫de, a alimenta√ß√£o, o trabalho, a moradia, o transporte, o lazer, a seguran√ßa, a previd√™ncia social, a prote√ß√£o √† maternidade e √† inf√¢ncia, a assist√™ncia aos desamparados, na forma desta Constitui√ß√£o.',
          level: 1
        }
      ],
      metadata: {
        publication_date: '1988-10-05',
        authority: 'Assembleia Nacional Constituinte',
        status: 'active' as const,
        tags: ['constitui√ß√£o', 'direitos fundamentais']
      }
    }
    
    // Sample Civil Code articles
    const sampleCivilCode = {
      id: 'cc2002_sample',
      title: 'C√≥digo Civil - Artigos Exemplo',
      type: 'code' as const,
      source_url: 'http://www.planalto.gov.br/ccivil_03/leis/2002/l10406.htm',
      content: [
        {
          id: 'cc_art1',
          type: 'article' as const,
          number: '1',
          text: 'Toda pessoa √© capaz de direitos e deveres na ordem civil.',
          level: 1
        },
        {
          id: 'cc_art2',
          type: 'article' as const,
          number: '2',
          text: 'A personalidade civil da pessoa come√ßa do nascimento com vida; mas a lei p√µe a salvo, desde a concep√ß√£o, os direitos do nascituro.',
          level: 1
        }
      ],
      metadata: {
        publication_date: '2002-01-10',
        authority: 'Presid√™ncia da Rep√∫blica',
        status: 'active' as const,
        tags: ['c√≥digo civil', 'personalidade']
      }
    }
    
    // Process documents
    const pipeline = new ETLPipeline()
    
    // Process Constitution sample
    const constitutionChunks = TextChunker.chunkLegalContent(sampleConstitution.content, 1000)
    await pipeline.processDocument(sampleConstitution, constitutionChunks, supabase)
    
    // Process Civil Code sample
    const civilCodeChunks = TextChunker.chunkLegalContent(sampleCivilCode.content, 1000)
    await pipeline.processDocument(sampleCivilCode, civilCodeChunks, supabase)
    
    console.log('‚úÖ Sample documents imported successfully')
  } catch (error) {
    console.error('‚ùå Error importing sample documents:', error)
  }
}

/**
 * Main import function
 */
async function main() {
  console.log('üöÄ Starting ETL Import Process...')
  
  const args = process.argv.slice(2)
  const importType = args[0] || 'all'
  
  try {
    switch (importType) {
      case 'constitution':
        await importConstitution()
        break
      case 'civil-code':
        await importCivilCode()
        break
      case 'stf-sumulas':
        await importSTFSumulas()
        break
      case 'stj-sumulas':
        await importSTJSumulas()
        break
      case 'sample':
        await importSampleDocuments()
        break
      case 'all':
        await importSampleDocuments()
        await importSTFSumulas()
        await importSTJSumulas()
        break
      default:
        console.log('Usage: npm run etl:import [constitution|civil-code|stf-sumulas|stj-sumulas|sample|all]')
    }
    
    console.log('üéâ ETL Import Process completed!')
  } catch (error) {
    console.error('üí• ETL Import Process failed:', error)
    process.exit(1)
  }
}

// Run if called directly
if (require.main === module) {
  main()
}

export { main as runETLImport }

